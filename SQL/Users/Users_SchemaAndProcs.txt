ALTER PROC [dbo].[Users_CheckIsGoogleUser]
    @Email NVARCHAR(255)
AS
BEGIN
    SET NOCOUNT ON;
    SELECT ISNULL(IsGoogleUser, 0) AS IsGoogleUser
    FROM dbo.Users
    WHERE Email = @Email;
END
GO
---- Users_Confirm.sql ----
CREATE PROC dbo.Users_Confirm
	@UserId INT
AS 
/* -- TESTING EXEC BLOCK
	DECLARE 
		@UserId INT = 2
	EXEC dbo.Users_Confirm
		@UserId
	SELECT
		FirstName,
		LastName,
		IsConfirmed
	FROM dbo.Users
	WHERE UserId = @UserId
*/
BEGIN
	DECLARE @True INT = 1

	UPDATE dbo.Users
	SET IsConfirmed = @True
	WHERE UserId = @UserId
END
---- Users_DeleteById.sql ----
CREATE PROC [dbo].[Users_DeleteById]
	@UserId int
AS
/*
	DECLARE @UserId int = x
	EXECUTE dbo.Users_DeleteById
		@UserId
*/
BEGIN
	DELETE FROM dbo.Users
	WHERE UserId = @UserId
END;
---- Users_Insert.sql ----
USE [SOPSC]
GO
/****** Object:  StoredProcedure [dbo].[Users_Insert]    Script Date: 12/12/2024 5:18:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[Users_Insert]
        (@UserId int OUTPUT
        ,@FirstName nvarchar(50)
        ,@LastName nvarchar(50)
        ,@Email nvarchar(100)
        ,@Password nvarchar(255)
        ,@IsActive bit
        ,@RoleId int
        ,@AgencyId int = NULL)
AS
BEGIN
        DECLARE
                @LastLoginDate DATETIME2(7) = GETDATE();
        INSERT INTO dbo.Users
                (FirstName,
                LastName,
                Email,
                Password,
                LastLoginDate,
                IsActive,
                RoleId,
                AgencyId)
        VALUES
                (@FirstName,
                @LastName,
                @Email,
                @Password,
                @LastLoginDate,
                @IsActive,
                @RoleId,
                @AgencyId)

        SET @UserId = SCOPE_IDENTITY();
END

---- Users_InsertGoogle.sql ----
ALTER PROC [dbo].[Users_InsertGoogle]
	@FirstName NVARCHAR(100),
	@LastName NVARCHAR(100),
	@Email NVARCHAR(255),
	@ProfilePicturePath NVARCHAR(255),
	@IsGoogleUser BIT,
	@Id INT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

	INSERT INTO Users
	(
		FirstName,
		LastName,
		Email,
		Password,
		ProfilePicturePath,
		IsGoogleUser,
		IsConfirmed,
		DateCreated,
		LastLoginDate,
		IsActive,
		HoursServed,
		RoleId
	)
	VALUES
	(
		@FirstName,
		@LastName,
		@Email,
		NULL,
		@ProfilePicturePath,
		@IsGoogleUser,
		1,
		GETUTCDATE(),
		GETUTCDATE(),
		1,
		0.00,
		3
	);

	SET @Id = SCOPE_IDENTITY();
END
---- Users_Login(v2).sql ----
ALTER PROC [dbo].[Users_Login]
	@Email NVARCHAR(100),
	@Password NVARCHAR(255),
	@DeviceId NVARCHAR(255),
	@Token NVARCHAR(MAX) OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE
		@UserId INT,
		@HashedPassword NVARCHAR(255),
		@FirstName NVARCHAR(50),
		@LastName NVARCHAR(50),
		@RoleId INT,
		@IsActive BIT;

	-- Retrieve user credentials
	SELECT
		@UserId = UserId,
		@FirstName = FirstName,
		@LastName = LastName,
		@HashedPassword = Password,
		@RoleId = RoleId,
		@IsActive = IsActive
	FROM dbo.Users
	WHERE Email = @Email

	-- Check if user exists and password is valid
	IF @UserId IS NULL
	BEGIN
		RAISERROR('Invalid email or password', 16, 1);
		RETURN;
	END

	IF NOT @IsActive = 1
	BEGIN
		RAISERROR('Account is inactive.', 16, 1);
		RETURN;
	END

	SELECT
		@UserId AS UserId,
		@FirstName AS FirstName,
		@LastName AS LastName,
		@HashedPassword AS HashedPassword,
		@RoleId AS RoleId,
		@IsActive AS IsActive
END;
---- Users_Login.sql ----
ALTER PROC dbo.Users_Login
	@Email NVARCHAR(100),
	@Password NVARCHAR(255)
AS
BEGIN
	SET NOCOUNT ON;

	-- Check if user exists and verify password
	SELECT
		UserId,
		FirstName,
		LastName,
		RoleId,
		IsActive
	FROM dbo.Users
	WHERE Email = @Email AND Password = @Password
END;
---- Users_SelectAll.sql ----
USE [SOPSC]
GO
/****** Object:  StoredProcedure [dbo].[Users_SelectAll]    Script Date: 12/16/2024 12:25:12 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[Users_SelectAll]
        @PageIndex INT,
        @PageSize INT
AS

/*
        DECLARE
                @PageIndex INT = 0,
                @PageSize INT = 5

        EXECUTE dbo.Users_SelectAll
                @PageIndex,
                @PageSize
*/

BEGIN
        DECLARE @Offset INT = @PageIndex * @PageSize

        SELECT
                [UserId],
                [FirstName],
                [LastName],
                [Email],
                [DateCreated],
                [LastLoginDate],
                [ProfilePicturePath],
                [IsActive],
                [HoursServed],
                [RoleId],
                [AgencyId],
                COUNT(1) OVER() AS TotalCount
        FROM [dbo].[Users]
        ORDER BY UserId
        OFFSET @Offset Rows
        FETCH NEXT @PageSize Rows ONLY
END

---- Users_SelectByEmail.sql ----
ALTER PROC [dbo].[Users_SelectByEmail]
	@Email NVARCHAR(255)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT
		UserId
	FROM
		Users
	WHERE
		Email = @Email
END
---- Users_SelectById.sql ----
ALTER PROC [dbo].[Users_SelectById]
	@UserId int

AS
/*
	DECLARE
		@UserId int = 2
	EXECUTE dbo.Users_SelectById
		@UserId
*/
BEGIN
        SELECT [UserId],
                [FirstName],
                [LastName],
                [Email],
                [DateCreated],
                [LastLoginDate],
                [ProfilePicturePath],
                [IsActive],
                [HoursServed],
                [RoleId],
                [AgencyId]
        FROM [dbo].[Users]

	WHERE UserId = @UserId

END
---- Users_SelectBySearch.sql ----
ALTER PROC [dbo].[Users_SelectBySearch]
        @PageIndex int,
        @PageSize int,
        @Query nvarchar(100)

AS

/*
        DECLARE
                @PageIndex int = 1,
                @PageSize int = 3,
                @Query nvarchar(100) = 'Tyler'
        EXECUTE dbo.Users_SelectBySearch
                @PageIndex,
                @PageSize,
                @Query
*/

BEGIN
        DECLARE @StartingRow int = (@PageIndex) * @PageSize;
        SELECT
                [UserId],
                [FirstName],
                [LastName],
                [Email],
                [ProfilePicturePath],
                [DateCreated],
                [LastLoginDate],
                [IsActive],
                [RoleId],
                [AgencyId],
                TotalCount = COUNT(1) OVER()
        FROM [dbo].[Users]
        WHERE FirstName LIKE '%' + @Query + '%'
                OR LastName LIKE '%' + @Query + '%'
        ORDER BY UserId

        OFFSET @StartingRow ROWS
        FETCH NEXT @PageSize ROWS ONLY
END;

---- Users_SelectRoleById.sql ----
ALTER PROC [dbo].[Users_SelectRoleById]
        @UserId INT
AS
/* -- TESTING EXEC BLOCK
        DECLARE
                @UserId int = 2
        EXEC dbo.Users_SelectWithRoles_ByUserId
                @UserId
*/
BEGIN
        -- User Details
        SELECT
                u.UserId,
                u.FirstName,
                u.LastName,
                u.Email,
                u.ProfilePicturePath,
                u.IsActive,
                u.RoleId,
                u.AgencyId,
                u.HoursServed,
                u.DateCreated,
                u.LastLoginDate,
                u.IsConfirmed,
                r.RoleName
        FROM Users u
        INNER JOIN
                Roles r ON u.RoleId = r.RoleId
        WHERE UserId = @UserId;
END;

---- Users_SelectUsersByHours.sql ----
ALTER PROC [dbo].[Users_SelectUsersByHours]
AS
/*
	EXECUTE dbo.Users_SelectUsersByHours
*/
BEGIN
	SELECT
		u.UserId,
		u.FirstName,
		u.LastName,
		u.Email,
		SUM(r.HoursOfService) AS TotalHours
	FROM dbo.Users u
	LEFT JOIN dbo.Reports r ON u.UserId = r.UserId
	GROUP BY u.UserId, u.FirstName, u.LastName, u.Email
	ORDER BY TotalHours DESC;
END;
---- Users_SelectWithRoles_ByUserId.sql ----
ALTER PROC dbo.Users_SelectWithRoles_ByUserId
	@UserId INT
AS
/* -- TESTING EXEC BLOCK
	DECLARE
		@UserId int = 2
	EXEC dbo.Users_SelectWithRoles_ByUserId
		@UserId
*/
BEGIN
	-- User Details
	SELECT
		u.UserId,
		u.FirstName,
		u.LastName,
		u.Email,
		u.ProfilePicturePath,
		u.IsActive,
		r.RoleName
	FROM Users u
	INNER JOIN
		Roles r ON u.RoleId = r.RoleId
	WHERE UserId = @UserId;
END;
---- Users_Select_Auth_Data.sql ----
ALTER PROC [dbo].[Users_Select_Auth_Data]
	@Email nvarchar(100)
	
AS
/*-- TESTING EXECUTION BLOCK
	DECLARE 
		@Email nvarchar(255) = 'sirmrtyler.business@gmail.com'
	EXEC dbo.Users_Select_Auth_Data 
		@Email
*/
BEGIN
	DECLARE @UserId int = (SELECT UserId from dbo.Users WHERE Email = @Email)

	SET NOCOUNT ON;

    -- Insert statements for procedure here
        SELECT
                Password,
                UserId,
                RoleId
        FROM    dbo.Users
        WHERE   UserId = @UserId
		GROUP BY	Password,
					UserId,
					RoleId
		SELECT
				r.RoleName AS Role
		FROM	dbo.Roles r
		INNER JOIN	dbo.Users u ON r.RoleId = u.RoleId
		WHERE		u.UserId = @UserId
END
---- Users_SetIsActive.sql ----
ALTER PROCEDURE [dbo].[Users_SetIsActive]	
	@UserId int,
	@IsActive BIT
	
AS

/*-- TESTING EXECUTION BLOCK
	DECLARE 
		@UserId INT = 2
		@IsActive BIT = 1
	EXEC dbo.Users_UpdateIsActive 
		@UserId
		@IsActive
	SELECT FirstName
			,Lastname
			,IsActive
	FROM dbo.Users
	WHERE UserId = @UserId
*/

BEGIN
	UPDATE	dbo.Users
	SET 
		IsActive = @IsActive,
		LastLoginDate = CASE
			WHEN @IsActive = 1 THEN GETUTCDATE()
			ELSE LastLoginDate
		END
	WHERE	UserId = @UserId
END

---- Users_Update.sql ----
ALTER PROC [dbo].[Users_Update]
    @UserId INT,
    @FirstName NVARCHAR(100),
    @LastName NVARCHAR(100),
    @Email NVARCHAR(255),
    @ProfilePicturePath NVARCHAR(255) = NULL,
    @RoleId INT,
    @AgencyId INT = NULL
AS
BEGIN
    UPDATE dbo.Users
    SET
        FirstName = @FirstName,
        LastName = @LastName,
        Email = @Email,
        ProfilePicturePath = @ProfilePicturePath,
        RoleId = @RoleId,
        AgencyId = @AgencyId
    WHERE UserId = @UserId;
END

---- Users_UpdateGoogle.sql ----
ALTER PROC [dbo].[Users_UpdateGoogle]
    @UserId INT,
    @FirstName NVARCHAR(100),
    @LastName NVARCHAR(100),
    @ProfilePicturePath NVARCHAR(255),
	@IsGoogleUser BIT
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE dbo.Users
    SET
        FirstName = @FirstName,
        LastName = @LastName,
        ProfilePicturePath = @ProfilePicturePath,
		IsGoogleUser = @IsGoogleUser,
        LastLoginDate = GETUTCDATE(),
        IsActive = 1
    WHERE UserId = @UserId;
END

---- dbo.Users_UpdateIsActive.sql ----
ALTER PROCEDURE [dbo].[Users_UpdateIsActive]	
	@UserId int
	
AS

/*-- TESTING EXECUTION BLOCK
	DECLARE @UserId INT = 2

	EXEC dbo.Users_UpdateIsActive 
		@UserId

	SELECT FirstName
			,Lastname
			,IsActive
	FROM dbo.Users
	WHERE UserId = @UserId
*/

BEGIN
	UPDATE	dbo.Users
	SET		
	IsActive = CASE
				WHEN IsActive = 1 THEN 0
				ELSE 1
			   END
	WHERE	UserId = @UserId

END
GO
