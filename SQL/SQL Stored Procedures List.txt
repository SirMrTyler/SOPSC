---------------------------------------------------------------------------------MESSAGES PROCS---------------------------------------------------------------------------------
ALTER PROC [dbo].[Messages_DeleteById]
	@MessageIds NVARCHAR(MAX) -- A comma-sperated string of message IDs to delete
AS
/* -- TESTING EXECUTION BLOCK
	DECLARE @MessageIds NVARCHAR(MAX) = '13,14'; -- Example message IDs to delete
	DECLARE @UserId INT = 2;

	EXEC dbo.Messages_SelectAllInInbox
		@UserId;
	EXEC dbo.Messages_DeleteById
		@MessageIds;
	EXEC dbo.Messages_SelectAllInInbox
		@UserId;

*/
BEGIN
	DECLARE @MessageIdTable TABLE (MessageId INT);
	INSERT INTO @MessageIdTable (MessageId)
	SELECT VALUE
	FROM STRING_SPLIT(@MessageIds, ','); -- Split MessageIds into individual values

	-- Delete notifications tied to the selected messages
	DELETE FROM dbo.Notifications
	WHERE MessageId IN (SELECT MessageId FROM @MessageIdTable);

	-- Delete the messages themselves
	DELETE FROM dbo.Messages
	WHERE MessageId IN (SELECT MessageId FROM @MessageIdTable);
END;


ALTER PROC [dbo].[Messages_UpdateReadStatus]
    @MessageId INT,
    @IsRead BIT
AS
BEGIN
    UPDATE dbo.Messages
    SET IsRead = @IsRead,
        ReadTimestamp = CASE WHEN @IsRead = 1 THEN SYSDATETIME() ELSE NULL END
    WHERE MessageId = @MessageId;

    SELECT *
    FROM dbo.Messages
    WHERE MessageId = @MessageId;
END;


ALTER PROC [dbo].[Messages_DeleteConversation]
	@UserId INT,
	@OtherUserId INT
AS
/*-- TESTING EXECUTION BLOCK
	DECLARE @UserId INT = 2;
	DECLARE @OtherUserId INT = 3;
	
	EXEC dbo.Messages_SelectAllInInbox -- Displays current messages in the conversation between users
		@UserId;
	EXEC dbo.Messages_DeleteConversation -- Deletes conversation between users
		@UserId,
		@OtherUserId;
	EXEC dbo.Messages_SelectAllInInbox -- Displays messages after deletion of conversation
		@UserId;
*/
BEGIN
	DELETE FROM dbo.Notifications
	WHERE MessageId IN (
		SELECT MessageId
		FROM dbo.Messages
		WHERE (SenderId = @UserId AND RecipientId = @OtherUserId)
			OR(SenderId = @OtherUserId AND RecipientId = @UserId)
	);

	DELETE FROM dbo.Messages
	WHERE (SenderId = @UserId AND RecipientId = @OtherUserId)
		OR(SenderId = @OtherUserId AND RecipientId = @UserId);
END;


ALTER PROC [dbo].[Messages_Insert]
	@MessageId INT OUTPUT,
	@SenderId INT,
	@RecipientId INT,
	@MessageContent NVARCHAR(MAX)
AS
/* -- Testing Exectution Block
	DECLARE @MessageId INT;
	EXEC dbo.Messages_Insert
		@MessageId OUTPUT,
		@SenderId = 1,
		@RecipientId = 2,
		@MessageContent = 'Hello, this is a test message.';
	SELECT *
	FROM dbo.Messages
	WHERE MessageId = @MessageId;
*/
BEGIN
	INSERT INTO dbo.Messages (
		SenderId,
		RecipientId,
		MessageContent,
		SentTimestamp,
		IsRead)
	VALUES (
		@SenderId,
		@RecipientId,
		@MessageContent,
		SYSDATETIME(),
		0);
	-- Get newley created MessageId
	SET @MessageId = SCOPE_IDENTITY();

	SELECT *
	FROM dbo.Messages
	WHERE MessageId = @MessageId;
END;


ALTER PROC [dbo].[Messages_SelectAll]
	@UserId INT
AS
/* -- TESTING EXECUTION BLOCK
	DECLARE @UserId INT = 2;

	EXEC dbo.Messages_SelectAllInInbox
		@UserId;
*/
BEGIN
	SELECT
		LatestMessages.MessageId,

		-- Get user id of the other user
		CASE
			WHEN LatestMessages.SenderId = @UserId THEN LatestMessages.RecipientId
			ELSE LatestMessages.SenderId
		END AS OtherUserId,

		-- Get Name of the other user
		CASE
			WHEN LatestMessages.SenderId = @UserId THEN RecipientUser.FirstName + ' ' + RecipientUser.LastName
			ELSE SenderUser.FirstName + ' ' + SenderUser.LastName
		END AS OtherUserName,

		-- Get profile picture of the other user
		CASE
			WHEN LatestMessages.SenderId = @UserId THEN RecipientUser.ProfilePicturePath
			ELSE SenderUser.ProfilePicturePath
		END AS OtherUserProfilePicturePath,

		-- Get truncated message content to display as a preview
		LEFT(LatestMessages.MessageContent, 50) + 
			CASE 
				WHEN LEN(LatestMessages.MessageContent) > 50 
				THEN '...' 
				ELSE '' 
			END AS MostRecentMessage,

		-- Get read reciepts/time stamps
		LatestMessages.IsRead,
		LatestMessages.SentTimestamp,
		ISNULL(UnreadMessages.NumMessages, 0) AS NumMessages,
		CASE
                	WHEN LatestMessages.SenderId = @UserId THEN 1
                        ELSE 0
                END AS IsLastMessageFromUser
	FROM (
		-- Subquery to determine most recent message in each conversation
		SELECT
			ROW_NUMBER() OVER (PARTITION BY
				CASE
					WHEN SenderId = @UserId THEN RecipientId
					ELSE SenderId
				END
				ORDER BY SentTimestamp DESC) AS RowNum,
				*
			FROM dbo.Messages
			WHERE SenderId = @UserId OR RecipientId = @UserId -- Only include messages where user is the sender/reciever
	) AS LatestMessages
	-- Join to get details of the sender
	LEFT JOIN dbo.Users AS SenderUser ON LatestMessages.SenderId = SenderUser.UserId
	-- Join to get details of recipient
	LEFT JOIN dbo.Users AS RecipientUser ON LatestMessages.RecipientId = RecipientUser.UserId
	-- Join Subquery to calculate how many unread messages in each conversation
	LEFT JOIN (
		SELECT
			-- If user was sender then return the recipient, and vice versa.
			CASE
				WHEN SenderId = @UserId THEN RecipientId
				ELSE SenderId
			END AS OtherUserId,
			-- Count unread messages where user is the recipient
			COUNT(*) AS NumMessages
		FROM dbo.Messages
		 -- Only count messages received by current user
		WHERE IsRead = 0 AND RecipientId = @UserId
		GROUP BY
			CASE
				WHEN SenderId = @UserId THEN RecipientId
				ELSE SenderId
			END
	) AS UnreadMessages ON
		UnreadMessages.OtherUserId = 
		CASE
			WHEN LatestMessages.SenderId = @UserId THEN LatestMessages.RecipientId
			ELSE LatestMessages.SenderId
		END
	-- Include only the most recent message for each conversation
	WHERE LatestMessages.RowNum = 1
	-- Sort conversations by the timestamp of the most recent message
	ORDER BY LatestMessages.SentTimestamp DESC;
END;


ALTER PROC [dbo].[Messages_SelectById]
	@MessageId INT
AS
/* -- TESTING EXECUTION BLOCK
	DECLARE @MessageId INT = 1; -- Replace with actual MessageId

	EXEC dbo.Messages_SelectById
		@MessageId;
*/
BEGIN
	SELECT
		m.MessageId,
		m.SenderId,
		s.FirstName + ' ' + s.LastName AS SenderName,
		m.RecipientId,
		r.FirstName + ' ' + r.LastName AS RecipientName,
		m.MessageContent,
		m.SentTimestamp,
		m.ReadTimestamp,
		m.IsRead
	FROM dbo.Messages AS m
	JOIN dbo.Users AS s ON m.SenderId = s.UserId
	JOIN dbo.Users AS r ON m.RecipientId = r.UserId
	WHERE m.MessageId = @MessageId;
END;


ALTER PROC [dbo].[Messages_SelectConversationByUserId]
	@UserId INT,		-- ID of logged-in user
	@OtherUserId INT	-- ID of user they are having conversation with
AS
/* -- TESTING EXECUTION BLOCK
	DECLARE @UserId INT = 2;
	DECLARE @OtherUserId INT = 3;

	EXEC dbo.Messages_SelectConversationByUserId
		@UserId,
		@OtherUserId;
*/
BEGIN
	UPDATE dbo.Messages
	SET
		IsRead = 1,
		ReadTimestamp = SYSDATETIME()
	WHERE RecipientId = @UserId
		AND SenderId = @OtherUserId
		AND IsRead = 0; -- Only update if not already read
	SELECT 
		m.MessageId,
		m.SenderId,
		s.FirstName + ' ' + s.LastName AS SenderName,
		m.RecipientId,
		r.FirstName + ' ' + r.LastName AS RecipientName,
		m.MessageContent,
		m.SentTimestamp,
		m.ReadTimestamp,
		m.IsRead
	FROM dbo.Messages AS m
	JOIN dbo.Users AS s ON m.SenderId = s.UserId
	JOIN dbo.Users AS r ON m.RecipientId = r.UserId
	WHERE (m.SenderId = @UserId AND m.RecipientId = @OtherUserId)
		OR(m.SenderId = @OtherUserId AND m.RecipientId = @UserId)
	ORDER BY m.SentTimestamp ASC; -- Chronological order
END;



---------------------------------------------------------------------------------NOTIFICATION PROCS--------------------------------------------------------------------------------- 
ALTER PROC [dbo].[Notifications_DeleteByNotificationId]
	@NotificationId INT

AS
/* -- Testing Exectution Block
	DECLARE @NotificationId INT = 1;

	EXEC dbo.Notifications_DeleteByNotificationId
		@NotificationId;

	SELECT *
	FROM dbo.Notifications
	WHERE NotificationId = @NotificationId;
*/
BEGIN
	IF EXISTS (SELECT 1 FROM dbo.Notifications WHERE NotificationId = @NotificationId)
	BEGIN
		-- Delete notification
		DELETE FROM dbo.Notifications
		WHERE NotificationId = @NotificationId

		-- Return confirmation
		PRINT 'Notification deleted successfully.';
	END
	ELSE
	BEGIN
		-- Raise error if notification doesn't exists
		RAISERROR('Notification does not exist', 16, 1, @NotificationId);
	END
END;


ALTER PROC [dbo].[Notifications_DeleteByQuantity]
AS
/* -- Testing Execution Block
	EXEC dbo.Notifications_DeleteByQuantity;
*/
BEGIN
	-- Delete notifications that have been read for more than 14 days
	DELETE FROM dbo.Notifications
	WHERE IsRead = 1
		AND DATEDIFF(DAY, ReadTimestamp, GETDATE()) > 14;
	DELETE FROM dbo.Notifications
	WHERE IsRead = 0
		AND DATEDIFF(DAY, CreatedTimestamp, GETDATE()) > 30;

	-- Optional: Print message to confirm deletions
	PRINT 'Old notifications deleted successfully.';
END;"


ALTER PROC [dbo].[Notifications_Insert]
	(@NotificationId INT OUTPUT
	,@NotificationTypeId INT
	,@UserId INT
	,@NotificationContent NVARCHAR(50) = NULL
	,@MessageId INT = NULL)
AS
/*
-- Testing Execution Block
	DECLARE 
        @NotificationId INT,  -- Corrected typo here
        @NotificationTypeId INT = 1,
        @UserId INT = 2,
        @NotificationContent NVARCHAR(50) = NULL,
        @MessageId INT = 1;

    EXEC dbo.Notifications_Insert
        @NotificationId OUTPUT,
        @NotificationTypeId, -- Replace with actual NotificationTypeId for testing
        @UserId, -- Replace with actual UserId for testing
        @NotificationContent, -- Example content
        @MessageId = 1; -- Example MessageId, replace with actual if needed

    SELECT * 
    FROM dbo.Notifications
    WHERE NotificationId = @NotificationId;
*/
BEGIN
	IF @MessageId IS NOT NULL
	BEGIN
		SELECT @NotificationContent = LEFT(MessageContent, 30) + '...'
		FROM dbo.Messages
		WHERE MessageId = @MessageId;
	END

	INSERT INTO dbo.Notifications
		(NotificationTypeId
		,UserId
		,NotificationContent
		,MessageId)
	VALUES
		(@NotificationTypeId
		,@UserId
		,@NotificationContent
		,@MessageId)

	SET @NotificationId = SCOPE_IDENTITY();

	-- Return inserted notification for confirmation
	SELECT *
	FROM dbo.Notifications
	WHERE NotificationId = @NotificationId
END;


ALTER PROC [dbo].[Notifications_SelectAll]
	@IsRead BIT
	,@UserId INT
AS
/* -- Testing Execution Block
	DECLARE
		@IsRead BIT = 0 --Unread = 0, Read = 1
		,@UserId INT = 2 -- Input UserId for user you want to search notifications for
	EXEC dbo.Notifications_SelectAllByRead
		@IsRead
		,@UserId

*/
BEGIN
	SELECT
		NotificationId
		,CreatedTimestamp
		,NotificationContent
	FROM dbo.Notifications
	WHERE IsRead = @IsRead AND UserId = @UserId
	ORDER BY CreatedTimestamp DESC
END


ALTER PROC [dbo].[Notifications_SelectAllByUserId]
	@UserId INT

AS
/*
-- Testing Execution Block
    DECLARE @UserId INT = 2; -- Example UserId for testing

    EXEC dbo.Notifications_SelectAllById
        @UserId;
*/
BEGIN
	SELECT
		n.NotificationId
		,n.NotificationTypeId
		,n.UserId AS ToUserId
		,u.FirstName + ' ' + u.LastName AS ToUserName
		,n.NotificationContent
		,n.CreatedTimestamp
		,n.ReadTimestamp
		,n.IsRead
		,n.MessageId
		-- Retrieve sender information from Messages table
		,s.UserId AS FromUserId
		,s.FirstName + ' ' + s.LastName AS FromUserName
	FROM dbo.Notifications AS n
	JOIN dbo.Users u ON n.UserId = u.UserId
	LEFT JOIN dbo.Messages m ON n.MessageId = m.MessageId
	LEFT JOIN dbo.Users s ON m.SenderId = s.UserId
	ORDER BY n.CreatedTimestamp DESC;
END;


ALTER PROC [dbo].[Notifications_SelectByNotificationId]
	@NotificationId INT

AS
/*
-- Testing Execution Block
    -- Change integer to view different Notification
	DECLARE 
		@NotificationId INT = 2;

	-- Exec procedure
    EXEC dbo.Notifications_SelectById
        @NotificationId

	-- Verify notification is marked as read
	SELECT *
	FROM dbo.Notifications
	WHERE NotificationId = @NotificationId;
*/
BEGIN
	UPDATE dbo.Notifications
	SET IsRead = 1,
		ReadTimestamp = SYSDATETIME()
	WHERE NotificationId = @NotificationId;

	SELECT 
        n.NotificationId,
        n.NotificationTypeId,
        nt.NotificationType,
        n.UserId AS ToUserId,
        u.FirstName + ' ' + u.LastName AS ToUserName,
        n.NotificationContent,
        n.CreatedTimestamp,
        n.ReadTimestamp,
        n.IsRead,
        n.MessageId,
        -- Retrieve sender information from Messages table if it’s a message notification
        m.SenderId AS FromUserId,
        s.FirstName + ' ' + s.LastName AS FromUserName,
        CASE 
            WHEN n.MessageId IS NOT NULL THEN m.MessageContent 
            ELSE n.NotificationContent
        END AS FullContent -- Display full message if it's a message notification, else the regular notification content
    FROM dbo.Notifications AS n
    JOIN dbo.Users u ON n.UserId = u.UserId
    LEFT JOIN dbo.NotificationType nt ON n.NotificationTypeId = nt.NotificationTypeId
    LEFT JOIN dbo.Messages m ON n.MessageId = m.MessageId
    LEFT JOIN dbo.Users s ON m.SenderId = s.UserId
    WHERE n.NotificationId = @NotificationId;
		
END;


ALTER PROC [dbo].[Notifications_UpdateReadStatus]
	@NotificationId INT
	,@IsRead BIT

AS
/* -- Testing Execution Block
	DECLARE @NotificationId INT = 1;
	DECLARE @IsRead BIT = 1;

	EXEC dbo.Notifications_UpdateReadStatus
		@NotificationId
		,@IsRead;

	SELECT *
	FROM dbo.Notifications
	WHERE NotificationId = @NotificationId
*/
BEGIN
	UPDATE dbo.Notifications
	SET
		IsRead = @IsRead,
		-- If it's read, don't update timestamp, if it's not, then update timestamp
		ReadTimestamp = CASE WHEN @IsRead = 1 THEN GETDATE() ELSE NULL END
	WHERE NotificationId = @NotificationId

	-- Check if any rows were affected
	IF @@ROWCOUNT = 0
		RAISERROR('Notification not found', 16, 1, @NotificationId);
	ELSE
		-- Return updated notification for confirmation
		SELECT *
		FROM dbo.Notifications
		WHERE NotificationId = @NotificationId;
END;


---------------------------------------------------------------------------------PRAYER REQUESTS PROCS----------------------------------------------------------------------------------
ALTER PROC	[dbo].[PrayerRequests_Insert]
	@PrayerId INT OUTPUT,
	@UserId INT,
	@Subject NVARCHAR(50),
	@Body NVARCHAR(MAX),
	@PrayerCount INT = 0
AS
/* -- TESTING EXECUTION BLOCK
	DECLARE @PrayerId INT;
	EXEC dbo.PrayerRequests_Insert
		@PrayerId OUTPUT,
		@UserId = 2,
		@Subject = 'Vigilance',
		@Body = 'Please pray for guidance in these trying times.',
		@PrayerCount = 0;

	SELECT *
	FROM dbo.PrayerRequests
	WHERE PrayerId = @PrayerId;
*/
BEGIN
	DECLARE 
		@NotificationContent NVARCHAR(255),
		@UserName NVARCHAR(100);

	SELECT @UserName = FirstName + ' ' + LastName
	FROM dbo.Users
	WHERE UserId = @UserId;

	INSERT INTO dbo.PrayerRequests
		(UserId,
		Subject,
		Body,
		PrayerCount)
	VALUES
		(@UserId,
		@Subject,
		@Body,
		@PrayerCount);

	SET @PrayerId = SCOPE_IDENTITY();

	-- Create notification content
	SET @NotificationContent = @UserName + ' has added a new prayer request: ' + @Subject;
	INSERT INTO dbo.Notifications
		(NotificationTypeId,
		UserId,
		NotificationContent,
		CreatedTimestamp,
		IsRead)
	SELECT
		7,
		UserId,
		@NotificationContent,
		SYSDATETIME(),
		0 -- Mark as unread
	FROM dbo.Users
	WHERE UserId <> @UserId
	  AND IsActive = 1;
END;


ALTER PROC [dbo].[PrayerRequests_SelectAll]
AS
/* -- TESTING EXECUTION BLOCK
	EXEC dbo.PrayerRequests_SelectAll;
*/
BEGIN
	SELECT
		pr.PrayerId,
		u.FirstName + ' ' + u.LastName AS UserName,
		pr.Subject,
		LEFT(pr.Body, 50) +
			CASE
				WHEN LEN(pr.body) > 50 THEN '...'
				ELSE ''
			END AS PrayerBody,
		pr.PrayerCount,
		pr.DateCreated
	FROM dbo.PrayerRequests AS pr
	JOIN dbo.Users u ON pr.UserId = u.UserId
	ORDER BY pr.DateCreated DESC;
END;"


ALTER PROC [dbo].[PrayerRequests_SelectById]
	@PrayerId INT
AS
/* -- TESTING EXECUTION BLOCK
	DECLARE @PrayerId INT = 1;

	EXEC dbo.PrayerRequests_SelectById
		@PrayerId;
*/
BEGIN
	SELECT
		pr.PrayerId,
		u.FirstName + ' ' + u.LastName AS UserName,
		pr.Subject,
		pr.Body,
		pr.PrayerCount,
		pr.DateCreated
	FROM dbo.PrayerRequests AS pr
	JOIN dbo.Users u ON pr.UserId = u.UserId
	WHERE pr.PrayerId = @PrayerId;
END;


ALTER PROC [dbo].[PrayerRequests_UpdateById]
	@PrayerId INT,
	@UserId INT,
	@NewSubject NVARCHAR(50),
	@NewBody NVARCHAR(MAX)
AS
/* -- TESTING EXECUTION BLOCK
	DECLARE
		@PrayerId INT = 1,
		@UserId INT = 2,
		@NewSubject NVARCHAR(50) = 'Updated Vigilance',
		@NewBody NVARCHAR(MAX) = 'Updated prayer request content';

	EXEC dbo.PrayerRequests_UpdateById
		@PrayerId,
		@UserId,
		@NewSubject,
		@NewBody;
*/
BEGIN
	DECLARE
		@OriginalPoster INT,
		@RoleId INT;

	-- Get UserId of op, and RoleId of requesting user
	SELECT
		@OriginalPoster = UserId
	FROM dbo.PrayerRequests
	WHERE PrayerId = @PrayerId;

	SELECT
		@RoleId = RoleId
	FROM dbo.Users
	WHERE UserId = @UserId;

	-- validate permissions
	        -- Allow Developer or Admin (RoleId <= 2) to update any request
        	IF (@OriginalPoster <> @UserId AND @RoleId > 2)
	BEGIN
		RAISERROR('Permission Denied.', 16, 1);
		RETURN;
	END;

	-- Perform update
	UPDATE dbo.PrayerRequests
	SET
		Subject = @NewSubject,
		Body = @NewBody
	WHERE PrayerId = @PrayerId;

	-- Return updated record
	SELECT *
	FROM dbo.PrayerRequests
	WHERE PrayerId = @PrayerId;
END;


ALTER PROC [dbo].[PrayerRequests_UpdatePrayerCount]
    @PrayerId INT,
    @UserId INT
AS
/* -- TESTING EXECUTION BLOCK
    DECLARE @PrayerId INT = 1;
    DECLARE @UserId INT = 3;

    EXEC dbo.PrayerRequests_UpdatePrayerCount
        @PrayerId,
        @UserId;
*/
BEGIN
    DECLARE 
        @OriginalPosterId INT,
        @PrayerCount INT,
        @NotificationContent NVARCHAR(255),
        @UserSpecificNotification NVARCHAR(255),
        @AlreadyPrayed BIT,
        @OriginalPosterName NVARCHAR(100);

    -- Get OP's UserId, Name, and current PrayerCount
    SELECT
        @OriginalPosterId = u.UserId,
        @OriginalPosterName = u.FirstName + ' ' + u.LastName,
        @PrayerCount = PrayerCount
    FROM dbo.PrayerRequests pr
    JOIN dbo.Users u ON pr.UserId = u.UserId
    WHERE PrayerId = @PrayerId;

    -- Check if the user has already prayed for this request
    SELECT @AlreadyPrayed = COUNT(*)
    FROM dbo.Notifications
    WHERE NotificationTypeId = 7
      AND UserId = @UserId
      AND NotificationContent = 'You joined ' + @OriginalPosterName + ' in prayer';

    -- If the user has already prayed, decrement the count and remove their "+1"
    IF @AlreadyPrayed = 1
    BEGIN
        -- Decrement PrayerCount
        UPDATE dbo.PrayerRequests
        SET PrayerCount = PrayerCount - 1
        WHERE PrayerId = @PrayerId;

        -- Remove the "+1" notification
        DELETE FROM dbo.Notifications
        WHERE NotificationTypeId = 7
          AND UserId = @UserId
          AND NotificationContent = 'You joined ' + @OriginalPosterName + ' in prayer';
    END
    ELSE
    BEGIN
        -- Increment PrayerCount
        UPDATE dbo.PrayerRequests
        SET PrayerCount = PrayerCount + 1
        WHERE PrayerId = @PrayerId;

        -- Get updated PrayerCount
        SELECT @PrayerCount = PrayerCount
        FROM dbo.PrayerRequests
        WHERE PrayerId = @PrayerId;

        -- Generate notification content for the original poster
        IF @PrayerCount = 1
            SET @NotificationContent = (
                SELECT u.FirstName + ' ' + u.LastName + ' has joined you in prayer'
                FROM dbo.Users u
                WHERE u.UserId = @UserId);
        ELSE
            SET @NotificationContent = (
                SELECT u.FirstName + ' ' + u.LastName + ' and ' + CAST(@PrayerCount - 1 AS NVARCHAR(10)) + ' other(s) have joined you in prayer'
                FROM dbo.Users u
                WHERE u.UserId = @UserId);

        -- Generate user-specific notification
        SET @UserSpecificNotification = 'You joined ' + @OriginalPosterName + ' in prayer';

        -- Insert Notification for the Original Poster
        INSERT INTO dbo.Notifications (
            NotificationTypeId,
            UserId,
            NotificationContent,
            CreatedTimestamp,
            IsRead
        )
        VALUES (
            7,
            @OriginalPosterId,
            @NotificationContent,
            SYSDATETIME(),
            0 -- Mark as unread
        );

        -- Insert User-Specific Notification for Tracking "+1"
        INSERT INTO dbo.Notifications (
            NotificationTypeId,
            UserId,
            NotificationContent,
            CreatedTimestamp,
            IsRead
        )
        VALUES (
            7,
            @UserId,
            @UserSpecificNotification,
            SYSDATETIME(),
            1 -- Mark as read
        );
    END;

    -- Select updated Prayer Request for confirmation
    SELECT
        pr.PrayerId,
        pr.Subject,
        pr.Body,
        pr.PrayerCount
    FROM dbo.PrayerRequests pr
    WHERE PrayerId = @PrayerId;
END;


---------------------------------------------------------------------------------REPORTS PROCS---------------------------------------------------------------------------------
ALTER PROCEDURE [dbo].[Reports_DeleteReportById]
    @ReportId INT,
	@RequestingUserId INT -- ID of user attempting to delete the report.
AS
/*
    DECLARE @ReportId INT = 8; -- Example report ID for testing
	DECLARE @RequestingUserId INT = 5; -- Example user ID for testing

    EXEC dbo.Reports_DeleteReportById
        @ReportId,
		@RequestingUserId;

	SELECT *
	FROM dbo.Reports
*/
BEGIN
    DECLARE @CreatorUserId INT;
    DECLARE @HoursOfService DECIMAL(5, 2);
	DECLARE @UserRoleId INT;
	-- Retrieve the UserId of the report creator and HoursOfService for the report
	SELECT 
		@CreatorUserId = UserId, 
		@HoursOfService = HoursOfService
	FROM dbo.Reports
	WHERE ReportId = @ReportId;

	-- Check if requesting user has required role (Admin or Developer)
	SELECT @UserRoleId = RoleId
	FROM dbo.Users
	WHERE UserId = @RequestingUserId;

        	-- Allow Developer or Admin (RoleId <= 2) to delete any report
        	IF @RequestingUserId = @CreatorUserId OR @UserRoleId <= 2
	BEGIN
		UPDATE dbo.Users
		SET HoursServed = HoursServed - @HoursOfService
		WHERE UserId = @CreatorUserId;

		-- Delete Report
		DELETE FROM dbo.Reports
		WHERE ReportId = @ReportId;
		
		RETURN;
	END
	ELSE
		BEGIN
			RAISERROR('Permission Denied', 16, 1);
		END

	-- Deduct hours from user total
	
END;


ALTER PROC [dbo].[Reports_Insert]
    @ReportId INT OUTPUT,
	@UserId INT,
    @MainAgency NVARCHAR(100),
    @SecondAgency NVARCHAR(100) = NULL, -- Optional
    @OtherAgency NVARCHAR(100) = NULL,  -- Optional
    @TypeOfService NVARCHAR(100),
	@BeginDispatchDate DATE,
	@EndDispatchDate DATE,
    @BeginDispatchTime TIME(0),
    @EndDispatchTime TIME(0),
    @ContactName NVARCHAR(100),
    @ContactPhone NVARCHAR(20) = NULL,
    @DispatchAddress NVARCHAR(255),
    @DispatchAddressLine2 NVARCHAR(255) = NULL, -- Optional
    @City NVARCHAR(100),
    @State NVARCHAR(50),
    @PostalCode NVARCHAR(20),
    @Narrative NVARCHAR(MAX) = NULL,
    @HoursOfService DECIMAL(5, 2) = NULL,
    @MilesDriven DECIMAL(5, 2),
    @ReportDate DATETIME,
	@DivisionId INT
AS
/*
	DECLARE @ReportId INT;

	EXEC dbo.Reports_Insert
		@ReportId = @ReportId OUTPUT,
		@UserId = 2,
		@MainAgency = 'Coastal Valley',
		@SecondAgency = NULL,
        @OtherAgency = NULL,
        @TypeOfService = 'Incident Response',
        @BeginDispatchDate = '2024-11-10',
        @EndDispatchDate = '2024-11-10',
		@BeginDispatchTime = '08:00',
		@EndDispatchTime = '16:00',
        @ContactName = 'Jesus',
        @ContactPhone = '777-777-7777',
        @DispatchAddress = '316 John St',
        @DispatchAddressLine2 = 'Suite 777',
        @City = 'Not Las Vegas',
        @State = 'OR',
        @PostalCode = '97439',
        @Narrative = 'For god so loved the world, that he gave his only begotten Son...',
        @HoursOfService = NULL,
        @MilesDriven = 15.5,
		@ReportDate = '2024-09-25 10:45: 00',
		@DivisionId = 3

		SELECT *
		FROM dbo.Reports
		WHERE ReportId = @ReportId
*/
BEGIN
	DECLARE @DateDiffHours DECIMAL(5, 2) = DATEDIFF(DAY, @BeginDispatchDate, @EndDispatchDate)*24;
	DECLARE @TimeDiffHours DECIMAL(5, 2) =
		DATEDIFF(MINUTE, @BeginDispatchTime, @EndDispatchTime) / 60.0;
	SET @HoursOfService = @DateDiffHours + @TimeDiffHours;
	SELECT @HoursOfService AS CalculatedHours;

	INSERT INTO dbo.Reports (
		UserId,
		MainAgency,
        SecondAgency,
        OtherAgency,
        TypeOfService,
		BeginDispatchDate,
		EndDispatchDate,
        BeginDispatchTime,
        EndDispatchTime,
        ContactName,
        ContactPhone,
        DispatchAddress,
        DispatchAddressLine2,
        City,
        State,
        PostalCode,
        Narrative,
        HoursOfService,
        MilesDriven,
		ReportDate,
		DivisionId
	) VALUES (
		@UserId,
        @MainAgency,
        @SecondAgency,
        @OtherAgency,
        @TypeOfService,
        @BeginDispatchDate,
        @EndDispatchDate,
		@BeginDispatchTime,
		@EndDispatchTime,
        @ContactName,
        @ContactPhone,
        @DispatchAddress,
        @DispatchAddressLine2,
        @City,
        @State,
        @PostalCode,
        @Narrative,
        @HoursOfService,
        @MilesDriven,
		@ReportDate,
		@DivisionId
    );

	SET @ReportId = SCOPE_IDENTITY();

	UPDATE dbo.Users
	SET HoursServed = HoursServed + @HoursOfService
	WHERE UserId = @UserId;
END;


ALTER PROC [dbo].[Reports_SelectAll]

AS
/*
	EXECUTE dbo.Reports_SelectAllReports
*/
BEGIN
	SELECT
		r.ReportId,
        r.ReportDate,
        u.UserId,
        u.FirstName,
        u.LastName,
        u.Email,
        r.MainAgency,
        r.SecondAgency,
        r.OtherAgency,
        r.TypeOfService,
		r.BeginDispatchDate,
		r.EndDispatchDate,
        r.BeginDispatchTime,
        r.EndDispatchTime,
        r.ContactName,
        r.ContactPhone,
        r.DispatchAddress,
        r.AddressLine2,
        r.City,
        r.State,
        r.PostalCode,
        r.Narrative,
        r.HoursOfService,
        r.MilesDriven,
        r.DateCreated
	FROM dbo.Reports r
	JOIN dbo.Users u ON r.UserId = u.UserId
	ORDER BY r.ReportDate DESC;
END;


ALTER PROC [dbo].[Reports_SelectAllReportsByDivisionId]
	@DivisionId INT
AS
/*
	DECLARE @DivisionId INT = 1;
	EXECUTE Reports_SelectAllReportsByDivisionId
		@DivisionId = @DivisionId;
*/
BEGIN
	SELECT 
        r.ReportId,
        r.DateCreated,
        u.UserId,
        u.FirstName,
        u.LastName,
        u.Email,
		d.DivisionId,
		d.DivisionName,
        r.MainAgency,
        r.SecondAgency,
        r.OtherAgency,
        r.TypeOfService,
		r.BeginDispatchDate,
		r.EndDispatchDate,
        r.BeginDispatchTime,
        r.EndDispatchTime,
        r.ContactName,
        r.ContactPhone,
        r.DispatchAddress,
        r.DispatchAddressLine2,
        r.City,
        r.State,
        r.PostalCode,
        r.Narrative,
        r.HoursOfService,
        r.MilesDriven
    FROM dbo.Reports r
    JOIN dbo.Users u ON r.UserId = u.UserId
	JOIN dbo.Divisions d ON r.DivisionId = d.DivisionId
	WHERE r.DivisionId = @DivisionId
	ORDER BY r.DateCreated DESC;
END;


ALTER PROC [dbo].[Reports_SelectAllReportsByUser]
	@UserId INT -- Id of user (chaplain) whose reports you want to retrieve
AS
/*
	DECLARE @UserId INT = 2 -- Replace with UserId you want to query
	EXECUTE dbo.Reports_SelectAllReportsByUser
		@UserId = @UserId;
*/
BEGIN
	SELECT
        r.ReportId,
        r.ReportDate,
        r.MainAgency,
        r.SecondAgency,
        r.OtherAgency,
        r.TypeOfService,
		r.BeginDispatchDate,
		r.EndDispatchDate,
        r.BeginDispatchTime,
        r.EndDispatchTime,
        r.ContactName,
        r.ContactPhone,
        r.DispatchAddress,
        r.AddressLine2,
        r.City,
        r.State,
        r.PostalCode,
        r.Narrative,
        r.HoursOfService,
        r.MilesDriven,
        r.DateCreated
    FROM 
        dbo.Reports r
    WHERE 
        r.UserId = @UserId
    ORDER BY 
        r.ReportDate DESC;  -- Sorting by the most recent report first
END;


ALTER PROC [dbo].[Reports_UpdateReportById]
    @ReportId INT,
    @UserId INT,
    @MainAgency NVARCHAR(100),
    @SecondAgency NVARCHAR(100) = NULL,
    @OtherAgency NVARCHAR(100) = NULL,
    @TypeOfService NVARCHAR(100),
    @BeginDispatchDate DATE = NULL,
	@EndDispatchDate DATE = NULL,
	@BeginDispatchTime TIME(0) = NULL,
    @EndDispatchTime TIME(0) = NULL,
    @ContactName NVARCHAR(100),
    @ContactPhone NVARCHAR(20) = NULL,
    @DispatchAddress NVARCHAR(255),
    @DispatchAddressLine2 NVARCHAR(255) = NULL,
    @City NVARCHAR(100),
    @State NVARCHAR(50),
    @PostalCode NVARCHAR(20),
    @Narrative NVARCHAR(MAX) = NULL,
    @HoursOfService DECIMAL(5, 2),
    @MilesDriven DECIMAL(5, 2),
	@ReportDate datetime,
    @DivisionId INT
AS
/*
	DECLARE @ReportId INT = 5;

	EXEC dbo.Reports_UpdateReportById
		@ReportId,
		@UserId = 2,
		@MainAgency = 'Coastal Valley',
		@SecondAgency = NULL,
        @OtherAgency = NULL,
        @TypeOfService = 'Incident Response',
        @BeginDispatchDate = '2024-11-10',
        @EndDispatchDate = '2024-11-10',
		@BeginDispatchTime = '08:00',
		@EndDispatchTime = '12:00',
        @ContactName = 'Jesus',
        @ContactPhone = '777-777-7777',
        @DispatchAddress = '316 John St',
        @DispatchAddressLine2 = 'Suite 777',
        @City = 'Not Las Vegas',
        @State = 'OR',
        @PostalCode = '97439',
        @Narrative = 'For god so loved the world, that he gave his only begotten Son...',
        @HoursOfService = NULL,
        @MilesDriven = 15.5,
		@ReportDate = '2024-09-25 10:45: 00',
		@DivisionId = 3

		SELECT *
		FROM dbo.Reports
		WHERE ReportId = @ReportId;
*/
BEGIN
	DECLARE @CurrentHours DECIMAL(10, 2) = 0;
	SELECT @CurrentHours = @HoursOfService
	FROM dbo.Reports
	WHERE ReportId = @ReportId;

	UPDATE dbo.Users
	SET HoursServed = HoursServed - @CurrentHours
	WHERE UserId = @UserId;

	DECLARE @DateDiffHours DECIMAL(5, 2) = DATEDIFF(DAY, @BeginDispatchDate, @EndDispatchDate)*24;
	DECLARE @TimeDiffHours DECIMAL(5, 2) =
		DATEDIFF(MINUTE, @BeginDispatchTime, @EndDispatchTime) / 60.0;
	SET @HoursOfService = @DateDiffHours + @TimeDiffHours;

	UPDATE dbo.Reports
	SET 
		UserId = @UserId,
		MainAgency = @MainAgency,
		SecondAgency = @SecondAgency,
		OtherAgency = @OtherAgency,
		TypeOfService = @TypeOfService,
		BeginDispatchDate = @BeginDispatchDate,
		EndDispatchDate = @EndDispatchDate,
		BeginDispatchTime = @BeginDispatchTime,
		EndDispatchTime = @EndDispatchTime,
		ContactName = @ContactName,
		ContactPhone = @ContactPhone,
		DispatchAddress = @DispatchAddress,
		DispatchAddressLine2 = @DispatchAddressLine2,
		City = @City,
		State = @State,
		PostalCode = @PostalCode,
		Narrative = @Narrative,
		HoursOfService = @HoursOfService,
		MilesDriven = @MilesDriven,
		ReportDate = @ReportDate,
		DivisionId = @DivisionId,
		DateModified = SYSDATETIME()
	WHERE ReportId = @ReportId;
END;


---------------------------------------------------------------------------------ROLES PROCS---------------------------------------------------------------------------------
ALTER PROC [dbo].[Roles_SelectAllUsersByRole]
	@RoleId INT -- Id of role for which you want to select Users
AS
/*
        DECLARE @RoleId INT = 2; -- All users with admin role
	EXECUTE Roles_SelectAllUsersByRole
		@RoleId = @RoleId;
*/
BEGIN
	SELECT 
		u.UserId,
		u.FirstName,
		u.LastName,
		u.Email,
		u.DateCreated,
		r.RoleId,
		r.RoleName
	FROM dbo.Users u
	JOIN dbo.Roles r ON u.RoleId = r.RoleId
	WHERE u.RoleId = @RoleId
	ORDER BY
		u.LastName, u.FirstName;
END;


ALTER PROC [dbo].[Roles_SelectRolesAllUsers]
AS
/*
	EXECUTE Roles_SelectRolesAllUsers; -- Returns list of all users along with their roles, sorted by RoleName.
*/
BEGIN
	SELECT
		u.UserId,
		u.FirstName,
		u.LastName,
		u.Email,
		u.DateCreated,
		r.RoleId,
		r.RoleName
	FROM dbo.Users u
	LEFT JOIN dbo.Roles r ON u.RoleId = r.RoleId
	ORDER BY r.RoleName, u.LastName, u.FirstName;
END;"


ALTER PROC [dbo].[Roles_SelectUserRolesById]
	@UserId INT -- ID of user whose role you want to retrieve
AS
/*
	DECLARE @UserId INT = 2 -- UserId of user you want to view role information
	EXECUTE dbo.Roles_SelectUserRolesById
		@UserId = @UserId;
*/
BEGIN
	SELECT
		u.UserId,
		u.FirstName,
		u.LastName,
		u.Email,
		u.DateCreated,
		r.RoleId,
		r.RoleName
	FROM
		dbo.Users u
	JOIN
		dbo.Roles r ON u.RoleId = r.RoleId
	WHERE
		u.UserId = @UserId;
END;


ALTER PROC [dbo].[Roles_UpdateRolesByUserId]
	@UserId INT,
	@RoleId INT

AS

/*
	DECLARE @UserId INT = 2; -- Pick the user who's role will be updated
        DECLARE @RoleId INT = 3; -- 3 = Member Role, 4 = Guest Role, 2 = Admin Role, 1 = Developer Role
	EXECUTE dbo.Roles_Insert
		@RoleName = 'Admin', -- Change 'Admin' to the role name you'd like to assign.
		@RoleId = @RoleId OUTPUT;

	-- Check newly inserted RoleId
	SELECT @RoleId AS NewRoleId;
*/

BEGIN
	IF EXISTS (SELECT 1 FROM dbo.Users WHERE UserId = @UserId)
	BEGIN
		UPDATE dbo.Users
		SET RoleId = @RoleId
		WHERE UserId = @UserId;

		PRINT 'Role updated successfully for UserId: ' + CAST(@UserId AS NVARCHAR);
	END
	ELSE
	BEGIN
		PRINT 'Error: UserId ' + CAST(@UserId AS NVARCHAR) + ' does not exist.';
	END
END;


---------------------------------------------------------------------------------USERS PROCS---------------------------------------------------------------------------------
ALTER PROC [dbo].[Users_Confirm]
	@UserId INT
AS 
/* -- TESTING EXEC BLOCK
	DECLARE 
		@UserId INT = 2
	EXEC dbo.Users_Confirm
		@UserId
	SELECT
		FirstName,
		LastName,
		IsConfirmed
	FROM dbo.Users
	WHERE UserId = @UserId
*/
BEGIN
	DECLARE @True INT = 1

	UPDATE dbo.Users
	SET IsConfirmed = @True
	WHERE UserId = @UserId
END"


ALTER PROC [dbo].[Users_DeleteById]
	@UserId int
AS
BEGIN
	DELETE FROM dbo.Users
	WHERE UserId = @UserId
END;"


ALTER PROC [dbo].[Users_Insert]
	(@UserId int OUTPUT
	,@FirstName nvarchar(50)
	,@LastName nvarchar(50)
	,@Email nvarchar(100)
	,@Password nvarchar(255)
	,@IsActive bit = 1 -- Default to active unless specified otherwise
	,@RoleId int)
AS
/* 
-- SELECT Statement Example:
-- Uncomment and customize the following block to run a test insert and select inserted user

	DECLARE @UserId int = 1 --Change x to id you want to select

	DECLARE
		@FirstName nvarchar(50) = 'Tyler',
		@LastName nvarchar(50) = 'Klein',
		@Email nvarchar(100) = 'sirmrtyler.business@gmail.com',
		@Password nvarchar(255) = '!LonxPrince1!',
		@IsActive bit = 1,
		@RoleId int = 2; -- 2 represents admin role
	EXECUTE dbo.Users_Insert
		@UserId OUTPUT,
		@FirstName,
		@LastName,
		@Email,
		@Password,
		@IsActive,
		@RoleId

	SELECT *
	FROM dbo.Users
	WHERE UserId = @UserId;


*/
BEGIN
	-- Check if email already exists in the database
	IF EXISTS (SELECT 1 FROM dbo.Users WHERE Email = @Email)
	BEGIN
		RAISERROR('A user with this email already exists.', 16, 1);
		RETURN;
	END

	DECLARE @LastLoginDate DATETIME2(7) = GETDATE();

	INSERT INTO dbo.Users
		(FirstName,
		LastName,
		Email,
		Password,
		LastLoginDate,
		IsActive,
		RoleId)
	VALUES
		(@FirstName,
		@LastName,
		@Email,
		@Password,
		@LastLoginDate,
		@IsActive,
		@RoleId)

	SET @UserId = SCOPE_IDENTITY();
END;


ALTER PROC [dbo].[Users_Login]
	@Email NVARCHAR(100),
	@Password NVARCHAR(255)
AS
BEGIN
	SET NOCOUNT ON;

	-- Check if user exists and verify password
	SELECT
		UserId,
		FirstName,
		LastName,
		RoleId,
		IsActive
	FROM dbo.Users
	WHERE Email = @Email AND Password = @Password
END;


ALTER PROC [dbo].[Users_Select_AuthData]
	@Email nvarchar(255)
	
AS
/*-- TESTING EXECUTION BLOCK
	DECLARE 
		@Email nvarchar(255) = 'sirmrtyler.business@gmail.com'
	EXEC dbo.Users_Select_AuthData 
		@Email
*/
BEGIN

DECLARE @UserId int = (SELECT UserId from dbo.Users WHERE Email = @Email)

    -- Insert statements for procedure here
	SELECT	
		Password,
		UserId,
		IsConfirmed
	FROM	dbo.Users
	WHERE	UserId = @UserId
	GROUP BY	Password,
				UserId,
				IsConfirmed

	SELECT 
		r.RoleName AS Role
	FROM		dbo.Roles r
	INNER JOIN	dbo.Users u ON r.RoleId = u.RoleId
	WHERE		u.UserId = @UserId
END;


ALTER PROC [dbo].[Users_SelectAll]
	@PageIndex INT,
	@PageSize INT
AS

/*
	DECLARE 
		@PageIndex INT = 0,
		@PageSize INT = 5

	EXECUTE dbo.Users_SelectAll
		@PageIndex,
		@PageSize
*/

BEGIN
	DECLARE @Offset INT = @PageIndex * @PageSize

	SELECT 
		[UserId],
		[FirstName],
		[LastName],
		[Email],
		[DateCreated],
		[LastLoginDate],
		[ProfilePicturePath],
		[IsActive],
		[HoursServed],
		[RoleId],
		COUNT(1) OVER() AS TotalCount
	FROM [dbo].[Users]
	ORDER BY UserId
	OFFSET @Offset Rows
	FETCH NEXT @PageSize Rows ONLY
END;


ALTER PROC [dbo].[Users_SelectById]
	@UserId int

AS
/*
	DECLARE
		@UserId int = 2
	EXECUTE dbo.Users_SelectById
		@UserId
*/
BEGIN
	SELECT [UserId],
		[FirstName],
		[LastName],
		[Email],
		[DateCreated],
		[LastLoginDate],
		[IsActive],
		[RoleId]
	FROM [dbo].[Users]

	WHERE UserId = @UserId

END;


ALTER PROC [dbo].[Users_SelectBySearch]
	@PageIndex int,
	@PageSize int,
	@Query nvarchar(100)

AS

/*
	DECLARE
		@PageIndex int = 1,
		@PageSize int = 3,
		@Query nvarchar(100) = 'Tyler'
	EXECUTE dbo.Users_SelectBySearch
		@PageIndex,
		@PageSize,
		@Query
*/

BEGIN
	DECLARE @StartingRow int = (@PageIndex-1) * @PageSize;
	SELECT 
		[UserId],
		[FirstName],
		[LastName],
		[Email],
		[DateCreated],
		[LastLoginDate],
		[IsActive],
		[RoleId],
		TotalCount = COUNT(1) OVER()		
	FROM [dbo].[Users]
	WHERE FirstName LIKE '%' + @Query + '%'
		OR LastName LIKE '%' + @Query + '%'
	ORDER BY UserId

	OFFSET @StartingRow ROWS
	FETCH NEXT @PageSize ROWS ONLY
END;


ALTER PROC [dbo].[Users_SelectUsersByHours]
AS
/*
	EXECUTE dbo.Users_SelectUsersByHours
*/
BEGIN
	SELECT
		u.UserId,
		u.FirstName,
		u.LastName,
		u.Email,
		SUM(r.HoursOfService) AS TotalHours
	FROM dbo.Users u
	LEFT JOIN dbo.Reports r ON u.UserId = r.UserId
	GROUP BY u.UserId, u.FirstName, u.LastName, u.Email
	ORDER BY TotalHours DESC;
END;


ALTER PROC [dbo].[Users_SelectWithRoles_ByUserId]
	@UserId INT
AS
/* -- TESTING EXEC BLOCK
	DECLARE
		@UserId int = 2
	EXEC dbo.Users_SelectWithRoles_ByUserId
		@UserId
*/
BEGIN
	-- User Details
	SELECT
		u.UserId,
		u.FirstName,
		u.LastName,
		u.Email,
		u.ProfilePicturePath,
		u.IsActive,
		r.RoleName
	FROM Users u
	INNER JOIN
		Roles r ON u.RoleId = r.RoleId
	WHERE UserId = @UserId;
END;


ALTER PROCEDURE [dbo].[Users_UpdateIsActive]	
	@UserId int
	
AS

/*-- TESTING EXECUTION BLOCK
	DECLARE @UserId INT = 2

	EXEC dbo.Users_UpdateIsActive 
		@UserId

	SELECT FirstName
			,Lastname
			,IsActive
	FROM dbo.Users
	WHERE UserId = @UserId
*/

BEGIN
	UPDATE	dbo.Users
	SET		
	IsActive = CASE
				WHEN IsActive = 1 THEN 0
				ELSE 1
			   END
	WHERE	UserId = @UserId

END;


---------------------------------------------------------------------------------USER TOKENS PROCS---------------------------------------------------------------------------------
ALTER PROC [dbo].[UserTokens_DeleteByToken]
	@Token NVARCHAR(255)
AS
/* -- TESTING EXEC BLOCK
	DECLARE 
		@Token NVARCHAR(255) = '28DB08E8-5B2A-414A-8281-043D0157A4A8'
	EXEC dbo.UserTokens_DeleteByToken
		@Token

	SELECT
		Token,
		UserId,
		Token
	FROM dbo.UserTokens
	WHERE Token = @Token
*/
BEGIN
	DELETE
	FROM dbo.UserTokens
	WHERE Token = @Token
END;


ALTER PROC [dbo].[UserTokens_Insert]
	@UserId INT, 
	@Token NVARCHAR(255),
	@ExpiryDate DATETIME2(7),
	@IsNonExpiring BIT
AS
BEGIN
	INSERT INTO dbo.UserTokens
		(UserId,
		Token,
		ExpiryDate,
		IsNonExpiring)
	VALUES
		(@UserId,
		@Token,
		@ExpiryDate,
		@IsNonExpiring);
END;


ALTER PROC [dbo].[UserTokens_SelectByToken]
	@Token NVARCHAR(255)
AS
/* -- TESTING EXEC BLOCK
	DECLARE
		@Token NVARCHAR(255) = '182A38E4-C6F0-4E3A-8868-A004A549FDD7'
	EXEC
		@Token
*/
BEGIN
	SELECT 
		ut.TokenId,
		ut.UserId,
		ut.Token
	FROM dbo.UserTokens ut
	INNER JOIN dbo.Users u
	ON u.TokenId = ut.TokenId 
	WHERE Token = @Token
END;